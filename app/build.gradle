plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
}

android {
    namespace 'com.rodgim.news'
    compileSdk 34

    defaultConfig {
        applicationId "com.rodgim.news"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        buildConfigField("String", 'API_KEY', "$news_api_key")
        buildConfigField("String", 'BASE_URL', "$base_url")

        testInstrumentationRunner "com.rodgim.news.HiltTestRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            resValue("string", "clear_text_config","true")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("string", "clear_text_config","false")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
        buildConfig = true
    }

    tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses true
        jacoco.excludes = ['jdk.internal.*']
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    testCoverage.jacocoVersion = "0.8.10"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'androidx.activity:activity-ktx:1.7.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.1'

    // Room
    implementation 'androidx.room:room-ktx:2.5.2'
    kapt 'androidx.room:room-compiler:2.5.2'

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.46.1'
    kapt 'com.google.dagger:hilt-android-compiler:2.46.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Navigation Components
    implementation "androidx.navigation:navigation-fragment-ktx:2.7.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.7.0"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.13.0'
    kapt 'com.github.bumptech.glide:compiler:4.13.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'

    implementation "androidx.test:core:1.5.0"
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.mockito:mockito-core:5.4.0"


    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "junit:junit:4.13.2"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1"
    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'org.mockito:mockito-android:5.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.38.1'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.46.1'

    debugImplementation "androidx.fragment:fragment-testing:1.6.1"
    debugImplementation "androidx.test:monitor:1.6.1"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    def androidExclusion = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Hilt*',
            '**/*hilt*',
            '**/*Impl*',
            '**/*Module_*Factory.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*Module*.*',
            '**/*Interceptor*.*',
            '**/*Database*.*'
    ]

    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }

    classDirectories.from = files([
            fileTree(
                    // Java generated classes (debug build)
                    dir: 'build/intermediates/javac/debug/classes',
                    excludes: androidExclusion
            ),
            fileTree(
                    // Kotlin generated classes (debug build)
                    dir: 'build/tmp/kotlin-classes/debug',
                    excludes: androidExclusion
            )
    ])
    sourceDirectories.from = files('src/main/java/')
    executionData.from = files('build/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec')
}

configurations.configureEach {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.10"
            }
        }
    }
}